#!/bin/sh

#########################################################
###################### CONFIG ###########################
#########################################################

# Diretórios de ícones
icon_dirs="
  /usr/share/icons/hicolor
  /usr/share/icons/Adwaita
  /usr/share/pixmaps
  $HOME/.local/share/icons
  $HOME/.icons
  /var/lib/flatpak/exports/share/icons
  $HOME/.local/share/flatpak/exports/share/icons
"

# Nome do ícone de fallback
fallback_icon_name="application-x-executable"

# Arquivo temporário para cache
cache_file="/tmp/icon_cache.txt"

#########################################################
###################### RUNTIME ##########################
#########################################################

# Define o ícone padrão para fallback
fallback_icon=""
for dir in $icon_dirs; do
  fallback_icon=$(find "$dir" -type f -name "${fallback_icon_name}*" 2>/dev/null | head -n 1)
  [ -n "$fallback_icon" ] && break
done

# Limpa o cache ao iniciar (opcional)
: > "$cache_file"

# Função para buscar ícones
find_icon() {
  local icon=""
  local class="$1"

  # Verifica se já está no cache
  if grep -q "^$class|" "$cache_file"; then
    icon=$(grep "^$class|" "$cache_file" | cut -d'|' -f2)
    if [ -f "$icon" ]; then
      echo "$icon"
      return
    else
      sed -i "/^$class|/d" "$cache_file"
    fi
  fi

  # Caso especial para jogos da Steam
  if [[ "$class" == steam_app_* ]]; then
    local steam_dir="$HOME/.steam/steam/appcache/librarycache"
    local app_id="${class#steam_app_}"
    local icon_path="${steam_dir}/${app_id}_icon.jpg"
    [ -f "$icon_path" ] && icon="$icon_path"
  else
    # Primeiro tenta resolver pelo .desktop
    desktop_file=$(find /usr/share/applications "$HOME/.local/share/applications" \
      /var/lib/flatpak/exports/share/applications "$HOME/.local/share/flatpak/exports/share/applications" \
      -type f -iname "${class,,}*.desktop" 2>/dev/null | head -n 1)

    if [ -n "$desktop_file" ]; then
      icon_name=$(grep -E '^Icon=' "$desktop_file" | head -n 1 | cut -d'=' -f2)
      if [ -n "$icon_name" ]; then
        for dir in $icon_dirs; do
          found_icon=$(find "$dir" -type f \( -iname "${icon_name}.*" -o -iname "${icon_name,,}.*" \) 2>/dev/null | head -n 1)
          if [ -n "$found_icon" ]; then
            icon="$found_icon"
            break
          fi
        done
      fi
    fi

    # Se ainda não encontrou, tenta pelo nome da classe
    if [ -z "$icon" ]; then
      # Incluir diretórios montados dinamicamente
      mount_dirs=$(echo /tmp/.mount_*/usr/share/icons)
      icon_dirs="$icon_dirs
      $mount_dirs"

      for dir in $icon_dirs; do
        icon=$(find "$dir" -iname "*${class,,}*" 2>/dev/null | head -n 1)
        [ -n "$icon" ] && break
      done
    fi
  fi

  # Se ainda estiver vazio, usa fallback
  [ -z "$icon" ] && icon="$fallback_icon"

  # Salva no cache
  echo "$class|$icon" >> "$cache_file"

  echo "$icon"
}

# Função para tratar mudanças de foco
OnChangedFocus() {
  window_data=$(hyprctl activewindow -j)
  window_title=$(echo "$window_data" | jq -r '.title')
  window_class=$(echo "$window_data" | jq -r '.class')
  window_icon=$(find_icon "$window_class")

  echo "{\"window_title\":\"$window_title\",\"window_class\":\"$window_class\",\"window_icon\":\"$window_icon\"}"
}

# Função para tratar eventos
handle() {
  case "$1" in
    activewindow\>*) OnChangedFocus;;
  esac
}

# Escuta o socket do Hyprland
socat -U - UNIX-CONNECT:"$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock" | \
while read -r line; do
  handle "$line"
done