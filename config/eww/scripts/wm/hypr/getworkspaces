#!/bin/sh

# Config
workspace_entries=("1" "2" "3" "4" "5" "6" "7" "8" "9")
workspace_names=("1" "2" "3" "4" "5" "6" "7" "8" "9")
#workspace_names=("一" "二" "三" "四" "五" "六" "七" "八" "九")
show_all_workspaces=0

# Runtime
current_workspace=0
empty_workspaces=()

function OnChangedWorkspace {
  local return="["
  local index=0
  local event="$1"
  local new_workspace=$(echo "$event" | sed 's/.*>>\([0-9]*\).*/\1/')
  local active_workspaces=$(hyprctl workspaces -j | jq 'length')
  local non_empty_workspaces=($(hyprctl workspaces -j | jq -r '.[] | .id'))

  empty_workspaces=()
  for workspace in "${workspace_entries[@]}"; do
    if [[ ! " ${non_empty_workspaces[@]} " =~ " ${workspace} " ]]; then
        empty_workspaces+=("$workspace")
    fi

    active="false"
    onclick="hyprctl dispatch workspace $workspace"

    # Visible handle
    visible=$([ "$show_all_workspaces" == "1" ] && echo "true" || echo "false")

    if [[ $show_all_workspaces -eq 0 ]]; then
      for non_empty_workspace in "${non_empty_workspaces[@]}"; do
          if [[ "$non_empty_workspace" == "$workspace" ]]; then
              visible="true"
              break
          fi
      done
    fi

    # Current workspace handle
    if [ "$workspace" -eq "$new_workspace" ]; then
      current_workspace=$workspace;
      active="true"
      visible="true"
    fi

    # First workspace workaround
    if [ "$index" == "0" ]; then
      return="$return"
    else
      return="$return,"
    fi

    return="$return{\"name\":\"${workspace_names[$workspace-1]}\",\"visible\":\"$visible\",\"active\":\"$active\",\"onclick\":\"$onclick\"}"
    index=$index+1
  done

  # new workspace button
  if [[ $show_all_workspaces -eq 0 ]]; then
    visible="false"
    onclick=""
    if [ ${#empty_workspaces[@]} -gt 0 ]; then
      visible="true"
      onclick="hyprctl dispatch workspace ${empty_workspaces[0]}"

      there_is_a_empty_workspace=$(hyprctl workspaces -j | jq -r '.[] | select(.windows < 1) | .id')
      if [[ ! -z "$there_is_a_empty_workspace" ]]; then
        visible="false"
      fi
    fi
    return="$return,{\"name\":\"+\",\"visible\":\"$visible\",\"active\":\"false\",\"onclick\":\"$onclick\"}"
  fi

  # finally
  return=$return]

  echo $return
}

function OnChangedFocus {
  if [[ $show_all_workspaces -eq 1 ]]; then
    return
  fi

  local event=$1
  local workspace=$(hyprctl activewindow -j | jq -r '.workspace.id')

  if [[ "$workspace" != "null" ]] && [[ "$workspace" != "$current_workspace" ]]; then
    return
  fi
  
  if [ ${#empty_workspaces[@]} -gt 0 ]; then
    there_is_a_empty_workspace=$(hyprctl workspaces -j | jq -r '.[] | select(.windows < 1) | .id')
    visible="true"
    if [[ ! -z "$there_is_a_empty_workspace" ]]; then
      visible="false"
    fi
    new_workspaces_entries=$(eww get workspaces_entries | jq '.[-1].onclick = "hyprctl dispatch workspace '${empty_workspaces[0]}'" | .[-1].visible = "'${visible}'"')
    echo $new_workspaces_entries
  fi
}

function handle {
  case $1 in
    workspace\>*) OnChangedWorkspace $1;;
    activewindow\>*) OnChangedFocus $1;;
  esac
}

OnChangedWorkspace "workspace>>1";

socat -U - UNIX-CONNECT:$XDG_RUNTIME_DIR/hypr/$HYPRLAND_INSTANCE_SIGNATURE/.socket2.sock | while read -r line; do handle "$line"; done